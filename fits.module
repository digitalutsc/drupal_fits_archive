<?php

/**
 * @file
 * Contains fits.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use GuzzleHttp\Client;

/**
 * Implements hook_help().
 */
function fits_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the islandora_lite_fits module.
    case 'help.page.islandora_lite_fits':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module represent DSU&#039;&#039;s approach toward Fits in our Islandora Lite Stack') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function fits_theme()
{
  return [
    'islandora_lite_fits' => [
      'render element' => 'children',
    ],
  ];
}

function fits_node_presave($node)
{
  print_log("fits_node_presave");

}

/**
 * Implement hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
 */
function fits_entity_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  // only extract Fits for File level only
  if ($entity->getEntityType()->getLabel()->getUntranslatedString() === "File" && \Drupal::config('fits.fitsconfig')->get("fits-extract-ingesting") === 1) {
    executeFitsAction($entity);
  }

}

/**
 * Shared function call for execute Fits Action
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function executeFitsAction(Drupal\Core\Entity\EntityInterface $entity) {
  // fix warning when Config form hasn't been setup
  $config = \Drupal::config('fits.fitsconfig');
  if (!isset($config) || empty($config->get("fits-advancedqueue_id"))) {
    return;
  }
  $file = \Drupal\file\Entity\File::load($entity->id());

  // trigger generate Fits action
  $action = \Drupal::entityTypeManager()
    ->getStorage('action')
    ->load('fits_action');
  if ($action) {
    $action->execute([$file]);
  }
}

/**
 * Implement hook_entity_update
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
 */
function fits_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityType()->getLabel()->getUntranslatedString() === "File") {

  }
}

/**
 * Implement hook_form_alter
 *
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function fits_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if (startsWith($form_id, "file_") && endsWith($form_id, "_edit_form")) {
        $form['fits'] = array(
            '#type' => 'details',
            '#title' => 'Fits',
            '#open' => true,
        );
        global $base_url;
        $form['fits']['description'] = array(
            '#markup' => t("<p>The following fields are generated by Fits tool. To update them, run the action <i>FITS - Generate and Extract Technical metadata for File</i> at <a href=\"$base_url/admin/content/files\">$base_url/admin/content/files</a></p>")
        );
        foreach(array_keys($form) as $field) {
            if (strpos($field, "_fits") !== false || strpos($field, "_fits_") !== false) {
                $form['fits'][$field] = $form[$field];
                if ($field === "field_fits_pronom_puid") {
                    $form['fits'][$field]['widget'][0]['target_id']['#attributes']['disabled'] = TRUE;
                }
                else {
                    $form['fits'][$field]['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
                }

                unset($form[$field]);
            }
        }
    }

}

/**
 * check if string start with sub-string
 * https://stackoverflow.com/questions/834303/startswith-and-endswith-functions-in-php
 * @param $haystack
 * @param $needle
 * @return bool
 */
function startsWith( $haystack, $needle ) {
    $length = strlen( $needle );
    return substr( $haystack, 0, $length ) === $needle;
}

/**
 * check if string end with sub-string
 * https://stackoverflow.com/questions/834303/startswith-and-endswith-functions-in-php
 * @param $haystack
 * @param $needle
 * @return bool
 */
function endsWith( $haystack, $needle ) {
    $length = strlen( $needle );
    if( !$length ) {
        return true;
    }
    return substr( $haystack, -$length ) === $needle;
}


/**
 * Implement hook_form_FORM_ID_alter
 * Purpose: Modify the Help text field to repurpose its use to contain Jmespath
 * Only effect for Fits related field (must contain the word "fits" to it)
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function fits_form_field_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  // get all available file types
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // get a need key component to detect fits related fields
  $parts = explode("/", \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];
  $field =  $parts[count($parts) -1];

  // limit JmesPath field modification for Fits related
  if (in_array($currentFileEntity, $fileTypes) && strpos($field, "_fits_") !== false) {
    $form['description']['#description'] = $form['description']['#description']. t("
    <p><u></i><strong>Important Note:</strong></u> With the Fits module enabled, the Helper text can evaluate JMespath(s) against Fits JSON field to extract technical meatadata.
    <br /><strong>Mandatory convention:</strong> <code>[{JmesPath}]</code>. For example. <code>[{fileinfo.md5checksum}]</code>. For multiple, enter them each line.
    <br />For further details about JMESPath, please visit: <a href='https://jmespath.org/tutorial.html' target='_blank'>https://jmespath.org/tutorial.html</a> </p>");
  }
}

/**
 * Implement hook_form_FORM_ID_alter
 * Purpose: to leave a note for use case
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function fits_form_field_ui_field_storage_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // get all available file types
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // get a need key component to detect fits related fields
  $parts = explode("/", \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];

  if (in_array($currentFileEntity, $fileTypes)) {
    $form['note-for-fits'] = [
      '#markup' => t('<strong>Important Note</strong>: If you are adding textfield(s) for Fits extraction with JMESPath, please make sure to have <code>_fits_</code> in the field\'s machine name (ie. <cdoe>field_fits_file_size</cdoe>)'),
    ];
  }

}


/**
 * [Unused] Loop through Fits json and get all of attributes and values
 * Call: iteratingFitsJsonObj((array)$fits, $index, $file);
 * https://www.opentechguides.com/how-to/article/php/205/php-nested-json.html
 * @param $arr
 * @param $index
 * @param $file
 */
function iteratingFitsJsonObj($arr, $index, $file)
{

  foreach ($arr as $key => $val) {
    if (is_object($val))
      $val = (array)$val;
    if (is_array($val)) {
      $index = iteratingFitsJsonObj($val, $index, $file);

    } else {
      //print_log("$index: $key = $val");
      $file->field_fits_fields->set($index, ['first' => $key, 'second' => $val]);
      $index++;
    }
  }

  return $index;
}


/**
 * Debug function: display any variable to error log
 *
 * @param $thing
 */
if (!function_exists('print_log')) {
  function print_log($thing)
  {
    error_log(print_r($thing, true), 0);
  }

}
/**
 * Debug function: display any variable to current webpage
 * @param $thing
 */
if (!function_exists('logging')) {
  function logging($thing)
  {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }
}


